AWSTemplateFormatVersion: "2010-09-09"
Description: Sample CloudFormation Template for API Gateway and Lambda Integration

Parameters:
  ApiGatewayName:
    Type: String
    Description: Name of the APIGateWay
  StackName:
    Default: pcloud
    Type: String
  Env:
    Description: Environment type.
    Default: dev
    Type: String
    ConstraintDescription: must specify dev,test,live.
  GetPostFunctionArn:
    Type: String
    Description: ARN of the Lambda Function GetPostFunction
  CreatePostFunctionArn:
    Type: String
    Description: ARN of the Lambda Function CreatePostFunction
  UpdatePostFunctionArn:
    Type: String
    Description: ARN of the Lambda Function UpdatePostFunction
  DeletePostFunctionArn:
    Type: String
    Description: ARN of the Lambda Function DeletePostFunction
  GetAllPostsFunctionArn:
    Type: String
    Description: ARN of the Lambda Function GetAllPostsFunction

Resources:
  APIGateWay:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateWay.RootResourceId
      RestApiId: !Ref APIGateWay
      PathPart: post

  APIGatewayResourceAllPosts:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateWay.RootResourceId
      RestApiId: !Ref APIGateWay
      PathPart: posts

  GetPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateWay
      ResourceId: !Ref APIGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            "method.response.header.Content-Type": true
          ResponseModels:
            "application/json": "Empty"
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostFunctionArn}/invocations"
        IntegrationResponses:
          - StatusCode: "200"

  GetPostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref GetPostFunctionArn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateWay}/*/GET/post"

  CreatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateWay
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "201"
          ResponseParameters:
            "method.response.header.Content-Type": true
          ResponseModels:
            "application/json": "Empty"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePostFunctionArn}/invocations"
        IntegrationResponses:
          - StatusCode: "201"

  CreatePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref CreatePostFunctionArn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateWay}/*/POST/post"

  UpdatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateWay
      ResourceId: !Ref APIGatewayResource
      HttpMethod: PATCH
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            "method.response.header.Content-Type": true
          ResponseModels:
            "application/json": "Empty"
      Integration:
        IntegrationHttpMethod: PATCH
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePostFunctionArn}/invocations"
        IntegrationResponses:
          - StatusCode: "204"

  UpdatePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref UpdatePostFunctionArn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateWay}/*/PATCH/post"

  DeletePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateWay
      ResourceId: !Ref APIGatewayResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            "method.response.header.Content-Type": true
          ResponseModels:
            "application/json": "Empty"
      Integration:
        IntegrationHttpMethod: DELETE
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePostFunctionArn}/invocations"
        IntegrationResponses:
          - StatusCode: "204"

  DeletePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref DeletePostFunctionArn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateWay}/*/DELETE/post"

  GetAllPostsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateWay
      ResourceId: !Ref APIGatewayResourceAllPosts
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            "method.response.header.Content-Type": true
          ResponseModels:
            "application/json": "Empty"
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllPostsFunctionArn}/invocations"
        IntegrationResponses:
          - StatusCode: "200"

  GetAllPostsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref GetAllPostsFunctionArn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateWay}/*/GET/posts"

  MyApiGatewayDeployment:
    DependsOn: [MyApiGatewayStage]
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateWay

  MyApiGatewayStage:
    DependsOn:
      [
        APIGatewayResource,
        GetPostMethod,
        CreatePostMethod,
        UpdatePostMethod,
        DeletePostMethod,
        GetAllPostsMethod,
      ]
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref APIGateWay
      DeploymentId: !Ref MyApiGatewayDeployment

Outputs:
  ApiEndpoint:
    Value: !Sub "https://${APIGateWay}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Description: URL of the deployed API endpoint
