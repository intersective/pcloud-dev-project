AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Lambda functions

Parameters:
  S3ObjectUrl:
    Type: String
    Description: HTTPS URL of the .zip file containing the GetPost function code.
  StackName:
    Default: pcloud
    Type: String
  Env:
    Description: Environment type.
    Default: dev
    Type: String
    ConstraintDescription: must specify dev,test,live.
  LambdaExecutionRoleArn:
    Type: String
    Description: ARN of the IAM role to be attached to the Lambda function.
  TableName:
    Type: String
    Description: Name of the DynamoDB Table

Resources:
  GetPostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          !Select [0, !Split [".", !Select [2, !Split ["/", !Ref S3ObjectUrl]]]]
        S3Key: !Join
          - "/"
          - - !Select [3, !Split ["/", !Ref S3ObjectUrl]]
            - !Select [4, !Split ["/", !Ref S3ObjectUrl]]
      Handler: api.getPost
      Runtime: nodejs18.x
      Role: !Ref LambdaExecutionRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Sub '${StackName}-${TableName}-${Env}'

  CreatePostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          !Select [0, !Split [".", !Select [2, !Split ["/", !Ref S3ObjectUrl]]]]
        S3Key: !Join
          - "/"
          - - !Select [3, !Split ["/", !Ref S3ObjectUrl]]
            - !Select [4, !Split ["/", !Ref S3ObjectUrl]]
      Handler: api.createPost
      Runtime: nodejs18.x
      Role: !Ref LambdaExecutionRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Sub '${StackName}-${TableName}-${Env}'

  UpdatePostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          !Select [0, !Split [".", !Select [2, !Split ["/", !Ref S3ObjectUrl]]]]
        S3Key: !Join
          - "/"
          - - !Select [3, !Split ["/", !Ref S3ObjectUrl]]
            - !Select [4, !Split ["/", !Ref S3ObjectUrl]]
      Handler: api.updatePost
      Runtime: nodejs18.x
      Role: !Ref LambdaExecutionRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Sub '${StackName}-${TableName}-${Env}'

  DeletePostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          !Select [0, !Split [".", !Select [2, !Split ["/", !Ref S3ObjectUrl]]]]
        S3Key: !Join
          - "/"
          - - !Select [3, !Split ["/", !Ref S3ObjectUrl]]
            - !Select [4, !Split ["/", !Ref S3ObjectUrl]]
      Handler: api.deletePost
      Runtime: nodejs18.x
      Role: !Ref LambdaExecutionRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Sub '${StackName}-${TableName}-${Env}'

  GetAllPostsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          !Select [0, !Split [".", !Select [2, !Split ["/", !Ref S3ObjectUrl]]]]
        S3Key: !Join
          - "/"
          - - !Select [3, !Split ["/", !Ref S3ObjectUrl]]
            - !Select [4, !Split ["/", !Ref S3ObjectUrl]]
      Handler: api.getAllPosts
      Runtime: nodejs18.x
      Role: !Ref LambdaExecutionRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Sub '${StackName}-${TableName}-${Env}'
